{
  "resource-type": "text-resource",
  "content-type": "text/html",
  "text": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\">\r\n<title>Voice → n8n (Icon‑Only UI)</title>\r\n<style>\r\n  body{margin:0;font-family:Arial,Helvetica,sans-serif;background:transparent;}\r\n  #btn{position:fixed;top:0;left:0;width:40px;height:40px;border:none;border-radius:8px;font-size:1.2rem;cursor:pointer;transition:background .2s;background:#777;color:#fff;}\r\n  #btn.listening{background:#4caf50}\r\n  #btn.finished{background:#0097a7}\r\n  #btn.error{background:#e53935}\r\n</style>\r\n</head>\r\n<body>\r\n<button id=\"btn\" title=\"Click to speak\" aria-label=\"Start speaking\">🎤</button>\r\n\r\n<script type=\"module\">\r\n(() => {\r\n  // 1️⃣ Speech recognizer – Chrome/Safari\r\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n  if (!SpeechRecognition) {\r\n    const btn = document.getElementById('btn');\r\n    btn.title = 'Speech API not supported';\r\n    btn.disabled = true;\r\n    return;\r\n  }\r\n  const rec = new SpeechRecognition();\r\n  rec.lang = 'en-US';\r\n  rec.interimResults = true;\r\n  rec.continuous = true;\r\n  rec.maxAlternatives = 1;\r\n\r\n  // 2️⃣ State\r\n  let fullTranscript = '';\r\n  let silenceTimer = null;\r\n  let isListening = false;\r\n  const btn = document.getElementById('btn');\r\n\r\n  // 3️⃣ UI helpers\r\n  const setButtonState = (state, icon = '🎤') => {\r\n    btn.className = '';\r\n    if (state) btn.classList.add(state);\r\n    btn.textContent = icon;\r\n  };\r\n\r\n  // 4️⃣ POST final text to n8n\r\n  const sendToN8N = async (text) => {\r\n    const url = '/system/webdev/Iggy/speech/process';\r\n    const params = new URLSearchParams(window.location.search);\r\n    const data = Object.fromEntries(params.entries());\r\n    data.text = text;\r\n    try {\r\n      const res = await fetch(url, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data),\r\n      });\r\n      await res.json(); // ignore payload\r\n      setButtonState('finished', '✅');\r\n    } catch (err) {\r\n      console.error('Error POSTing to n8n:', err);\r\n      setButtonState('error', '❌');\r\n    }\r\n  };\r\n\r\n  // 5️⃣ Silence timer helper\r\n  const resetSilenceTimer = () => {\r\n    clearTimeout(silenceTimer);\r\n    silenceTimer = setTimeout(() => {\r\n      silenceTimer = null;\r\n      rec.stop();\r\n      isListening = false;\r\n      setButtonState('finished', '✅');\r\n      sendToN8N(fullTranscript.trim());\r\n    }, 2000); // 2 s silence\r\n  };\r\n\r\n  // 6️⃣ Event handlers\r\n  rec.onresult = (e) => {\r\n    resetSilenceTimer();\r\n    for (let i = e.resultIndex; i < e.results.length; i++) {\r\n      const r = e.results[i];\r\n      const txt = r[0].transcript.trim();\r\n      if (r.isFinal) {\r\n        fullTranscript += txt + ' ';\r\n      }\r\n    }\r\n    btn.title = fullTranscript.trim();\r\n  };\r\n\r\n  rec.onerror = (err) => {\r\n    console.error('Speech error:', err);\r\n    setButtonState('error', '❌');\r\n  };\r\n\r\n  rec.onend = () => {\r\n    // Nothing special needed – the timer will finish it\r\n  };\r\n\r\n  // 7️⃣ Click to start / retry\r\n  btn.onclick = () => {\r\n    if (isListening) return;\r\n    fullTranscript = '';\r\n    isListening = true;\r\n    btn.title = 'Listening…';\r\n    setButtonState('listening', '🔊');\r\n    rec.start();\r\n  };\r\n})();\r\n</script>\r\n</body>\r\n</html>"
}