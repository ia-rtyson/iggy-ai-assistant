{
  "custom": {
    "artifact": {
      "id": ""
    },
    "chat": "",
    "chat_enabled": true,
    "ignition_chat_history": [],
    "thread": [],
    "tts": {
      "enabled": false,
      "processing": true
    }
  },
  "params": {
    "chat_id": ""
  },
  "propConfig": {
    "custom.artifact": {
      "persistent": true
    },
    "custom.artifact.chat_artifacts": {
      "binding": {
        "config": {
          "parameters": {
            "ignition_chat_history_id": "{view.params.chat_id}"
          },
          "queryPath": "Exchange/Iggy/Artifact/select_artifacts_with_ignition_chat_history_id",
          "returnFormat": "json"
        },
        "type": "query"
      }
    },
    "custom.chat": {
      "persistent": true
    },
    "custom.chat_enabled": {
      "persistent": true
    },
    "custom.ignition_chat_history": {
      "binding": {
        "config": {
          "parameters": {
            "chat_id": "{view.params.chat_id}"
          },
          "queryPath": "Exchange/Iggy/Chat/ignition_chat_history_get_chat_with_chat_id",
          "returnFormat": "json"
        },
        "type": "query"
      },
      "persistent": true
    },
    "custom.thread": {
      "binding": {
        "config": {
          "enableValueCache": false,
          "parameters": {
            "chat_id": "{view.params.chat_id}"
          },
          "queryPath": "Exchange/Iggy/Chat/get_chat_and_artifacts",
          "returnFormat": "json"
        },
        "transforms": [
          {
            "code": "\tsystem.util.getLogger(\u0027thread-binding-on-root\u0027).info(\u0027running binding\u0027)\n#\ttry:\n#\t\tif self.custom.tts.enabled and not self.custom.tts.processing:\n#\t\t\tself.custom.tts.processing \u003d True\n#\t\t\timport json\n#\t\t\tai_messages \u003d [msg for msg in value if msg[\"event_type\"] \u003d\u003d \"message\" and msg[\"message_type\"] \u003d\u003d \"ai\"]\n#\t\t\t\n#\t\t\t# get the last one by timestamp\n#\t\t\tlast_ai \u003d max(ai_messages, key\u003dlambda x: x[\"timestamp\"])\n#\t\t\t\n#\t\t\t# the content itself is a JSON string, so parse it\n#\t\t\tparsed_content \u003d json.loads(last_ai[\"content\"])\n#\t\t\t\n#\t\t\ttext \u003d parsed_content[\"content\"]\n#\t\t\tsystem.perspective.sendMessage(\u0027tts-save-and-play\u0027, {\u0027text\u0027:text})\n#\texcept:#add try except\n#\t\tpass\n\t\n\t\n\treturn value",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "custom.tts": {
      "persistent": true
    },
    "params.chat_id": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 838,
      "width": 1241
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "shrink": 0
            },
            "props": {
              "style": {
                "color": "--neutral-50",
                "fontFamily": "Noto Sans",
                "fontWeight": "bold"
              },
              "text": "Iggy, the Ignition Expert"
            },
            "type": "ia.display.label"
          },
          {
            "children": [
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {},
                      "scope": "C",
                      "type": "logout"
                    }
                  }
                },
                "meta": {
                  "name": "Image",
                  "tooltip": {
                    "enabled": true,
                    "text": "Click to Logout"
                  }
                },
                "position": {
                  "basis": "40px"
                },
                "propConfig": {
                  "props.source": {
                    "binding": {
                      "config": {
                        "path": "session.props.auth.user.userName"
                      },
                      "transforms": [
                        {
                          "code": "\tret \u003d \u0027/system/images/\u0027\n\tif value !\u003d \u0027admin\u0027:\n\t\tret+\u003dvalue+\u0027.png\u0027\n\telse:\n\t\tret+\u003d\u0027iggy.png\u0027\n\treturn ret",
                          "type": "script"
                        }
                      ],
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "fit": {
                    "mode": "contain"
                  },
                  "style": {
                    "borderBottomLeftRadius": "20px",
                    "borderBottomRightRadius": "20px",
                    "borderTopLeftRadius": "20px",
                    "borderTopRightRadius": "20px"
                  }
                },
                "type": "ia.display.image"
              }
            ],
            "meta": {
              "name": "FlexContainer"
            },
            "position": {
              "basis": "200px",
              "grow": 1
            },
            "props": {
              "justify": "flex-end"
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "FlexContainer_header"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "props": {
          "style": {
            "padding": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "children": [
                      {
                        "children": [
                          {
                            "meta": {
                              "name": "FlexRepeater"
                            },
                            "position": {
                              "grow": 1
                            },
                            "propConfig": {
                              "props.instances": {
                                "binding": {
                                  "config": {
                                    "path": "view.custom.thread"
                                  },
                                  "transforms": [
                                    {
                                      "code": "\tmessages \u003d []\n\tfor i in range(len(value)-1, -1, -1):\n\t\tmessages.append(value[i])\n\treturn messages",
                                      "type": "script"
                                    }
                                  ],
                                  "type": "property"
                                }
                              }
                            },
                            "props": {
                              "direction": "column-reverse",
                              "elementPosition": {
                                "basis": "auto",
                                "grow": 0,
                                "shrink": 0
                              },
                              "elementStyle": {
                                "margin": "10px"
                              },
                              "path": "Exchange/Iggy/Pages/Chat/chatView",
                              "useDefaultViewHeight": false,
                              "useDefaultViewWidth": false
                            },
                            "type": "ia.display.flex-repeater"
                          }
                        ],
                        "meta": {
                          "name": "FlexContainer_thread"
                        },
                        "position": {
                          "basis": "200px",
                          "grow": 1
                        },
                        "propConfig": {
                          "position.display": {
                            "binding": {
                              "config": {
                                "path": "view.params.chat_id"
                              },
                              "transforms": [
                                {
                                  "code": "\tif value:\n\t\tret \u003d True\n\telse:\n\t\tret \u003d False\n\treturn ret",
                                  "type": "script"
                                }
                              ],
                              "type": "property"
                            }
                          }
                        },
                        "props": {
                          "direction": "column"
                        },
                        "type": "ia.container.flex"
                      },
                      {
                        "children": [
                          {
                            "meta": {
                              "name": "Label"
                            },
                            "props": {
                              "style": {
                                "color": "--neutral-50",
                                "fontSize": "25px"
                              },
                              "text": "Iggy Assistant for Ignition"
                            },
                            "type": "ia.display.label"
                          }
                        ],
                        "meta": {
                          "name": "FlexContainer_placeholder"
                        },
                        "position": {
                          "basis": "200px",
                          "grow": 1
                        },
                        "propConfig": {
                          "position.display": {
                            "binding": {
                              "config": {
                                "path": "view.params.chat_id"
                              },
                              "transforms": [
                                {
                                  "code": "\tif value:\n\t\tret \u003d False\n\telse:\n\t\tret \u003d True\n\treturn ret",
                                  "type": "script"
                                }
                              ],
                              "type": "property"
                            }
                          }
                        },
                        "props": {
                          "alignItems": "center",
                          "justify": "center"
                        },
                        "type": "ia.container.flex"
                      },
                      {
                        "children": [
                          {
                            "meta": {
                              "name": "TextArea"
                            },
                            "position": {
                              "basis": "75px",
                              "grow": 1
                            },
                            "propConfig": {
                              "props.enabled": {
                                "binding": {
                                  "config": {
                                    "path": "view.custom.chat_enabled"
                                  },
                                  "type": "property"
                                }
                              },
                              "props.style.backgroundColor": {
                                "binding": {
                                  "config": {
                                    "path": "view.custom.chat_enabled"
                                  },
                                  "transforms": [
                                    {
                                      "code": "\tif self.view.custom.chat_enabled:\n\t\tret \u003d \u0027--nuetral-70\u0027\n\telse:\n\t\tret \u003d \u002700000000\u0027\n\treturn ret",
                                      "type": "script"
                                    }
                                  ],
                                  "type": "property"
                                }
                              },
                              "props.text": {
                                "binding": {
                                  "config": {
                                    "bidirectional": true,
                                    "path": "view.custom.chat"
                                  },
                                  "type": "property"
                                }
                              }
                            },
                            "props": {
                              "placeholder": "Enter Prompt",
                              "style": {
                                "borderColor": "#00000000",
                                "color": "--neutral-50"
                              }
                            },
                            "type": "ia.input.text-area"
                          },
                          {
                            "children": [
                              {
                                "meta": {
                                  "name": "FlexContainer_left"
                                },
                                "position": {
                                  "basis": "200px"
                                },
                                "type": "ia.container.flex"
                              },
                              {
                                "meta": {
                                  "name": "FlexContainer_right"
                                },
                                "position": {
                                  "basis": "200px"
                                },
                                "type": "ia.container.flex"
                              },
                              {
                                "events": {
                                  "component": {
                                    "onFileReceived": {
                                      "config": {
                                        "script": "\tfrom java.util import Base64\n\tbytes \u003d event.file.getBytes()\n\tdata \u003d Base64.getEncoder().encodeToString(bytes)\n\tparameters \u003d {\n\t\t\"ignition_chat_history_id\": self.view.custom.ignition_chat_history[0].id,\n\t\t\"artifact_type_id\": 4,#Image\n\t\t\"data\": data,\n\t\t\"description\": event.file.name\n\t}\n\t\n\t\n\t#insert into ignition chat memeory\n\tsystem.db.execUpdate(\"Exchange/Iggy/Artifact/insert_artifact\", parameters)\n\t\n\t#insert into n8n chat history\n\tparameters \u003d {\n\t\t\"session_id\": self.view.params.chat_id,\n\t\t\"message\": system.util.jsonEncode({\"type\": \"ai\", \"additional_kwargs\": {}, \"response_metadata\": {}, \"content\": \"## Artifact \u003ctype: %s\u003e\\n%s\" %(4, str(data))}),#artifact type is 4 for an image\n\t\t\"hide\": True\n\t}\n\tsystem.db.execUpdate(\"Exchange/Iggy/Artifact/insert_artifact_memory\", parameters)\n\t\n\t#refresh chat\n\tmessage \u003d {\n\t\t\u0027type\u0027:\u0027chat\u0027,\n\t\t\u0027session_id\u0027: self.session.props.id,\n\t\t\u0027chat_id\u0027: self.view.params.chat_id\n\t}\n\tsystem.perspective.sendMessage(\u0027refresh\u0027, message)"
                                      },
                                      "scope": "G",
                                      "type": "script"
                                    }
                                  }
                                },
                                "meta": {
                                  "name": "FileUpload",
                                  "tooltip": {
                                    "enabled": true,
                                    "text": "Upload Image"
                                  }
                                },
                                "position": {
                                  "basis": "40px",
                                  "shrink": 0
                                },
                                "propConfig": {
                                  "position.display": {
                                    "binding": {
                                      "config": {
                                        "path": "view.custom.chat_enabled"
                                      },
                                      "type": "property"
                                    }
                                  }
                                },
                                "props": {
                                  "fileUploadIcon": {
                                    "color": "--neutral-50",
                                    "path": "material/image",
                                    "style": {
                                      "classes": "",
                                      "cursor": "pointer",
                                      "margin": "2px"
                                    }
                                  },
                                  "maxUploads": 1,
                                  "supportedFileTypes": [
                                    "png",
                                    "jpg"
                                  ]
                                },
                                "type": "ia.input.fileupload"
                              },
                              {
                                "meta": {
                                  "name": "Icon_loading"
                                },
                                "position": {
                                  "basis": "35px"
                                },
                                "propConfig": {
                                  "position.display": {
                                    "binding": {
                                      "config": {
                                        "expression": "!{view.custom.chat_enabled}"
                                      },
                                      "type": "expr"
                                    }
                                  }
                                },
                                "props": {
                                  "path": "material/refresh",
                                  "style": {
                                    "classes": "icon spinning-icon"
                                  }
                                },
                                "type": "ia.display.icon"
                              },
                              {
                                "events": {
                                  "dom": {
                                    "onClick": {
                                      "config": {
                                        "script": "\tsystem.perspective.sendMessage(\u0027enter\u0027, {})\n#    chat_id \u003d self.view.params.chat_id\n#    url \u003d \"http://n8n:5678/webhook/chat_receive\"\n#    if not chat_id:\n#        username \u003d self.session.props.auth.user.userName\n#        chat \u003d self.view.custom.chat\n#        \n#        if username and chat:\n#            params \u003d {\n#                \"username\": username,\n#                \"description\": chat\n#            }\n#            \n#            new_id_dataset \u003d system.db.runNamedQuery(\"Exchange/Iggy/Chat/ignition_chat_history_insert\", params)\n#            \n#            if new_id_dataset.rowCount \u003e 0:\n#                new_id \u003d new_id_dataset.getValueAt(0, \"id\")\n#                new_chat_id \u003d \"{}-{}\".format(new_id, username)\n#                self.view.custom.chat_id \u003d new_chat_id\n#                chat_id \u003d new_chat_id\n#\n#    if chat_id:\n#        postData \u003d {\n#            \"chat\": self.view.custom.chat,\n#            \"session_id\": self.session.props.id,\n#            \"chat_id\": chat_id\n#        }\n#        \n#        exchange.iggy.n8n_integration.n8n_post(url,postData)\n#        self.view.custom.chat_enabled \u003d False\n#\t\t\n#    else:\n#        system.perspective.print(\"Could not send chat. A user and prompt are required to start a new session.\")\n#\t\n#\tsystem.perspective.print(postData)"
                                      },
                                      "scope": "G",
                                      "type": "script"
                                    }
                                  }
                                },
                                "meta": {
                                  "name": "Icon_enter",
                                  "tooltip": {
                                    "enabled": true,
                                    "text": "ctrl + enter"
                                  }
                                },
                                "position": {
                                  "basis": "35px"
                                },
                                "propConfig": {
                                  "position.display": {
                                    "binding": {
                                      "config": {
                                        "path": "view.custom.chat_enabled"
                                      },
                                      "type": "property"
                                    }
                                  }
                                },
                                "props": {
                                  "path": "material/arrow_forward",
                                  "style": {
                                    "classes": "icon"
                                  }
                                },
                                "type": "ia.display.icon"
                              },
                              {
                                "events": {
                                  "dom": {
                                    "onClick": {
                                      "config": {
                                        "script": "    self.view.custom.chat_enabled \u003d True"
                                      },
                                      "scope": "G",
                                      "type": "script"
                                    }
                                  }
                                },
                                "meta": {
                                  "name": "Icon_stop",
                                  "tooltip": {
                                    "enabled": true,
                                    "text": "Stop request Execution"
                                  }
                                },
                                "position": {
                                  "basis": "35px"
                                },
                                "propConfig": {
                                  "position.display": {
                                    "binding": {
                                      "config": {
                                        "expression": "!{view.custom.chat_enabled}"
                                      },
                                      "type": "expr"
                                    }
                                  }
                                },
                                "props": {
                                  "path": "material/stop",
                                  "style": {
                                    "classes": "icon"
                                  }
                                },
                                "type": "ia.display.icon"
                              },
                              {
                                "meta": {
                                  "name": "IFrame"
                                },
                                "position": {
                                  "basis": "40px",
                                  "shrink": 0
                                },
                                "propConfig": {
                                  "props.src": {
                                    "binding": {
                                      "config": {
                                        "expression": "\"/system/webdev/Iggy/speech/voice.html?sessionId\u003d\" + {session.props.id} + \"\u0026pageId\u003d\" + {page.props.pageId}"
                                      },
                                      "type": "expr"
                                    }
                                  }
                                },
                                "type": "ia.display.iframe"
                              }
                            ],
                            "meta": {
                              "name": "FlexContainer_icons"
                            },
                            "position": {
                              "basis": "40px"
                            },
                            "props": {
                              "justify": "flex-end",
                              "style": {
                                "overflow": "hidden"
                              }
                            },
                            "type": "ia.container.flex"
                          }
                        ],
                        "meta": {
                          "name": "FlexContainer_chat"
                        },
                        "props": {
                          "direction": "column",
                          "justify": "center",
                          "style": {
                            "classes": "chatbox",
                            "padding": "10px"
                          }
                        },
                        "type": "ia.container.flex"
                      }
                    ],
                    "meta": {
                      "name": "FlexContainer_chat"
                    },
                    "position": {
                      "basis": "1000px"
                    },
                    "props": {
                      "direction": "column",
                      "style": {
                        "paddingBottom": "20px",
                        "paddingTop": "20px"
                      }
                    },
                    "type": "ia.container.flex"
                  }
                ],
                "meta": {
                  "name": "FlexContainer_left"
                },
                "position": {
                  "position": "left"
                },
                "props": {
                  "justify": "center"
                },
                "type": "ia.container.flex"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "children": [
                          {
                            "events": {
                              "dom": {
                                "onClick": {
                                  "config": {
                                    "script": "\t#send to Exchange/Iggy/Pages/Chat/Chat root container\n\t\n\tsystem.perspective.sendMessage(\u0027artifact_id\u0027, {\u0027id\u0027: \u0027\u0027})"
                                  },
                                  "scope": "G",
                                  "type": "script"
                                }
                              }
                            },
                            "meta": {
                              "name": "Icon"
                            },
                            "position": {
                              "basis": "40px"
                            },
                            "props": {
                              "path": "material/close",
                              "style": {
                                "classes": "icon"
                              }
                            },
                            "type": "ia.display.icon"
                          }
                        ],
                        "meta": {
                          "name": "FlexContainer_icons"
                        },
                        "position": {
                          "basis": "200px"
                        },
                        "props": {
                          "justify": "flex-end"
                        },
                        "type": "ia.container.flex"
                      }
                    ],
                    "meta": {
                      "name": "FlexContainer_header"
                    },
                    "position": {
                      "basis": "40px",
                      "shrink": 0
                    },
                    "props": {
                      "justify": "flex-end"
                    },
                    "type": "ia.container.flex"
                  },
                  {
                    "meta": {
                      "name": "EmbeddedView"
                    },
                    "position": {
                      "basis": "800px"
                    },
                    "propConfig": {
                      "props.params.id": {
                        "binding": {
                          "config": {
                            "path": "view.custom.artifact.id"
                          },
                          "type": "property"
                        }
                      }
                    },
                    "props": {
                      "path": "Exchange/Iggy/Pages/Artifacts/Viewer"
                    },
                    "type": "ia.display.view"
                  }
                ],
                "meta": {
                  "name": "FlexContainer_right"
                },
                "position": {
                  "position": "right"
                },
                "props": {
                  "direction": "column",
                  "justify": "center",
                  "style": {
                    "padding": "10px"
                  }
                },
                "type": "ia.container.flex"
              }
            ],
            "meta": {
              "name": "SplitContainer"
            },
            "position": {
              "basis": "261px",
              "display": false,
              "grow": 1
            },
            "propConfig": {
              "props.split.position": {
                "binding": {
                  "config": {
                    "path": "view.custom.artifact.id"
                  },
                  "transforms": [
                    {
                      "code": "\tif value\u003d\u003d\u0027\u0027:\n\t\tret \u003d \u0027100%\u0027\n\telse:\n\t\tret \u003d \u002750%\u0027\n\treturn ret",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              },
              "props.split.visible": {
                "binding": {
                  "config": {
                    "path": "view.custom.artifact.id"
                  },
                  "transforms": [
                    {
                      "code": "\tif value\u003d\u003d\u0027\u0027:\n\t\tret \u003d False\n\telse:\n\t\tret \u003d True\n\treturn ret",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "split": {}
            },
            "type": "ia.container.split"
          },
          {
            "children": [
              {
                "children": [
                  {
                    "meta": {
                      "name": "FlexRepeater"
                    },
                    "position": {
                      "grow": 1
                    },
                    "propConfig": {
                      "props.instances": {
                        "binding": {
                          "config": {
                            "path": "view.custom.thread"
                          },
                          "transforms": [
                            {
                              "code": "\tmessages \u003d []\n\tfor i in range(len(value)-1, -1, -1):\n\t\tmessages.append(value[i])\n\treturn messages",
                              "type": "script"
                            }
                          ],
                          "type": "property"
                        }
                      }
                    },
                    "props": {
                      "direction": "column-reverse",
                      "elementPosition": {
                        "basis": "auto",
                        "grow": 0,
                        "shrink": 0
                      },
                      "elementStyle": {
                        "margin": "10px"
                      },
                      "path": "Exchange/Iggy/Pages/Chat/chatView",
                      "useDefaultViewHeight": false,
                      "useDefaultViewWidth": false
                    },
                    "type": "ia.display.flex-repeater"
                  }
                ],
                "meta": {
                  "name": "FlexContainer_thread"
                },
                "position": {
                  "basis": "200px",
                  "grow": 1
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "path": "view.custom.thread"
                      },
                      "transforms": [
                        {
                          "code": "\tif len(value):\n\t\tret \u003d True\n\telse:\n\t\tret \u003d False\n\treturn ret",
                          "type": "script"
                        }
                      ],
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "direction": "column"
                },
                "type": "ia.container.flex"
              },
              {
                "children": [
                  {
                    "meta": {
                      "name": "Label"
                    },
                    "props": {
                      "style": {
                        "color": "--neutral-50",
                        "fontSize": "25px"
                      },
                      "text": "What can I help you with?"
                    },
                    "type": "ia.display.label"
                  }
                ],
                "meta": {
                  "name": "FlexContainer_placeholder"
                },
                "position": {
                  "basis": "200px",
                  "grow": 1
                },
                "propConfig": {
                  "position.display": {
                    "binding": {
                      "config": {
                        "path": "view.custom.thread"
                      },
                      "transforms": [
                        {
                          "code": "\tif len(value):\n\t\tret \u003d False\n\telse:\n\t\tret \u003d True\n\treturn ret",
                          "type": "script"
                        }
                      ],
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "alignItems": "center",
                  "justify": "center"
                },
                "type": "ia.container.flex"
              },
              {
                "children": [
                  {
                    "meta": {
                      "name": "TextArea"
                    },
                    "position": {
                      "basis": "75px",
                      "grow": 1
                    },
                    "propConfig": {
                      "props.style.backgroundColor": {
                        "binding": {
                          "config": {
                            "path": "view.custom.chat_enabled"
                          },
                          "transforms": [
                            {
                              "code": "\tif self.view.custom.chat_enabled:\n\t\tret \u003d \u0027--nuetral-70\u0027\n\telse:\n\t\tret \u003d \u002700000000\u0027\n\treturn ret",
                              "type": "script"
                            }
                          ],
                          "type": "property"
                        }
                      },
                      "props.text": {
                        "binding": {
                          "config": {
                            "bidirectional": true,
                            "path": "view.custom.chat"
                          },
                          "type": "property"
                        }
                      }
                    },
                    "props": {
                      "deferUpdates": false,
                      "placeholder": "Enter Prompt",
                      "rejectUpdatesWhileFocused": false,
                      "style": {
                        "borderColor": "#00000000",
                        "color": "--neutral-50"
                      }
                    },
                    "type": "ia.input.text-area"
                  },
                  {
                    "children": [
                      {
                        "children": [
                          {
                            "events": {
                              "component": {
                                "onFileReceived": {
                                  "config": {
                                    "script": "\tlogger \u003d system.util.getLogger(\u0027onFileRecieved\u0027)\n\ttemp_messages \u003d [\n\t  {\n\t    \"event_type\": \"message\",\n\t    \"item_id\": -1,\n\t    \"interaction_number\": -1,\n\t    \"session_id\": \"\",\n\t    \"message_type\": \"ai\",\n\t    \"sort_group\": -1,\n\t    \"content\": \u0027{\"type\": \"ai\", \"content\": \"Uploading Image...\", \"additional_kwargs\": {}, \"response_metadata\": {}}\u0027,\n\t    \"timestamp\": 1756133013962\n\t  },\n\t  {\n\t    \"event_type\": \"Thinking\",\n\t    \"item_id\": -1,\n\t    \"interaction_number\": -1,\n\t    \"session_id\": \"\",\n\t    \"message_type\": \"ai\",\n\t    \"sort_group\": -1,\n\t    \"content\": \"{\\\"type\\\": \\\"ai\\\", \\\"content\\\": \"\", \\\"tool_calls\\\": [], \\\"additional_kwargs\\\": {}, \\\"response_metadata\\\": {}, \\\"invalid_tool_calls\\\": []}\",\n\t    \"timestamp\": 1756133013966\n\t  }\n\t]\n\tself.view.custom.thread.extend(temp_messages)\n\t\n\t\n\tfrom java.util import Base64\n\tbytes \u003d event.file.getBytes()\n\tdata \u003d Base64.getEncoder().encodeToString(bytes)\n\tparameters \u003d {\n\t\t\"ignition_chat_history_id\": self.view.custom.ignition_chat_history[0].id,\n\t\t\"artifact_type_id\": 4,#Image\n\t\t\"data\": data,\n\t\t\"description\": event.file.name,\n\t\t\"ignition_chat_history_chat_id\": self.view.params.chat_id\n\t}\n\t\n\t\n\t#insert into ignition chat memeory\n\tich_id \u003d system.db.execQuery(\"Exchange/Iggy/Artifact/insert_artifact\", parameters)\n#\tlogger.info(str(ich_id[0][0]))\n\t\n\t#insert into n8n chat history\n\tparameters \u003d {\n\t\t\"session_id\": self.view.params.chat_id,\n\t\t\"message\": system.util.jsonEncode({\"type\": \"ai\", \"additional_kwargs\": {}, \"response_metadata\": {}, \"content\": \"## Artifact \u003ctype: %s\u003e, \u0027ignition_chat_history_id\u0027: %s\" %(4, str(ich_id[0][0]))}),#artifact type is 4 for an image\n\t\t\"hide\": True\n\t}\n\tsystem.db.execUpdate(\"Exchange/Iggy/Artifact/insert_artifact_memory\", parameters)\n\t\n#\t#refresh chat\n\tmessage \u003d {\n\t\t\u0027type\u0027:\u0027chat\u0027,\n\t\t\u0027session_id\u0027: self.session.props.id,\n\t\t\u0027chat_id\u0027: self.view.params.chat_id\n\t}\n\tsystem.perspective.sendMessage(\u0027refresh\u0027, message)\n\tself.clearUploads()\n\t\n\t\n\t"
                                  },
                                  "scope": "G",
                                  "type": "script"
                                }
                              }
                            },
                            "meta": {
                              "name": "FileUpload",
                              "tooltip": {
                                "enabled": true,
                                "text": "Upload Image"
                              }
                            },
                            "position": {
                              "basis": "40px",
                              "shrink": 0
                            },
                            "propConfig": {
                              "position.display": {
                                "binding": {
                                  "config": {
                                    "path": "view.custom.chat_enabled"
                                  },
                                  "type": "property"
                                }
                              }
                            },
                            "props": {
                              "fileUploadIcon": {
                                "color": "--neutral-50",
                                "path": "material/image",
                                "style": {
                                  "classes": "",
                                  "cursor": "pointer",
                                  "margin": "2px"
                                }
                              },
                              "maxUploads": 1,
                              "supportedFileTypes": [
                                "png",
                                "jpg"
                              ]
                            },
                            "type": "ia.input.fileupload"
                          }
                        ],
                        "meta": {
                          "name": "FlexContainer_left"
                        },
                        "position": {
                          "basis": "200px"
                        },
                        "type": "ia.container.flex"
                      },
                      {
                        "children": [
                          {
                            "events": {
                              "dom": {
                                "onClick": {
                                  "config": {
                                    "script": "\tsystem.perspective.sendMessage(\u0027tts-toggle\u0027, {})"
                                  },
                                  "scope": "G",
                                  "type": "script"
                                }
                              }
                            },
                            "meta": {
                              "name": "Icon_tts",
                              "tooltip": {
                                "enabled": true,
                                "text": "Text to Speech Toggle"
                              }
                            },
                            "position": {
                              "basis": "35px"
                            },
                            "propConfig": {
                              "position.display": {
                                "binding": {
                                  "config": {
                                    "path": "view.custom.chat_enabled"
                                  },
                                  "type": "property"
                                }
                              },
                              "props.path": {
                                "binding": {
                                  "config": {
                                    "expression": "if({view.custom.tts.enabled}, \u0027material/record_voice_over\u0027,\u0027material/voice_over_off\u0027)"
                                  },
                                  "type": "expr"
                                }
                              }
                            },
                            "props": {
                              "style": {
                                "classes": "icon"
                              }
                            },
                            "type": "ia.display.icon"
                          },
                          {
                            "meta": {
                              "name": "IFrame"
                            },
                            "position": {
                              "basis": "40px",
                              "shrink": 0
                            },
                            "propConfig": {
                              "position.display": {
                                "binding": {
                                  "config": {
                                    "path": "view.custom.chat_enabled"
                                  },
                                  "type": "property"
                                }
                              },
                              "props.src": {
                                "binding": {
                                  "config": {
                                    "expression": "\"/system/webdev/Iggy/speech/voice.html?sessionId\u003d\" + {session.props.id} + \"\u0026pageId\u003d\" + {page.props.pageId}"
                                  },
                                  "type": "expr"
                                }
                              }
                            },
                            "type": "ia.display.iframe"
                          },
                          {
                            "events": {
                              "dom": {
                                "onClick": {
                                  "config": {
                                    "script": "\tsystem.perspective.sendMessage(\u0027enter\u0027, {})\n#    chat_id \u003d self.view.params.chat_id\n#    url \u003d \"http://n8n:5678/webhook/chat_receive\"\n#    if not chat_id:\n#        username \u003d self.session.props.auth.user.userName\n#        chat \u003d self.view.custom.chat\n#        \n#        if username and chat:\n#            params \u003d {\n#                \"username\": username,\n#                \"description\": chat\n#            }\n#            \n#            new_id_dataset \u003d system.db.runNamedQuery(\"Exchange/Iggy/Chat/ignition_chat_history_insert\", params)\n#            \n#            if new_id_dataset.rowCount \u003e 0:\n#                new_id \u003d new_id_dataset.getValueAt(0, \"id\")\n#                new_chat_id \u003d \"{}-{}\".format(new_id, username)\n#                self.view.custom.chat_id \u003d new_chat_id\n#                chat_id \u003d new_chat_id\n#\n#    if chat_id:\n#        postData \u003d {\n#            \"chat\": self.view.custom.chat,\n#            \"session_id\": self.session.props.id,\n#            \"chat_id\": chat_id\n#        }\n#        \n#        exchange.iggy.n8n_integration.n8n_post(url,postData)\n#        self.view.custom.chat_enabled \u003d False\n#\t\t\n#    else:\n#        system.perspective.print(\"Could not send chat. A user and prompt are required to start a new session.\")\n#\t\n#\tsystem.perspective.print(postData)"
                                  },
                                  "scope": "G",
                                  "type": "script"
                                }
                              }
                            },
                            "meta": {
                              "name": "Icon_enter",
                              "tooltip": {
                                "enabled": true,
                                "text": "ctrl + enter"
                              }
                            },
                            "position": {
                              "basis": "35px"
                            },
                            "propConfig": {
                              "position.display": {
                                "binding": {
                                  "config": {
                                    "path": "view.custom.chat_enabled"
                                  },
                                  "type": "property"
                                }
                              }
                            },
                            "props": {
                              "path": "material/arrow_forward",
                              "style": {
                                "classes": "icon"
                              }
                            },
                            "type": "ia.display.icon"
                          },
                          {
                            "events": {
                              "dom": {
                                "onClick": {
                                  "config": {
                                    "script": "    self.view.custom.chat_enabled \u003d True"
                                  },
                                  "scope": "G",
                                  "type": "script"
                                }
                              }
                            },
                            "meta": {
                              "name": "Icon_stop",
                              "tooltip": {
                                "enabled": true,
                                "text": "Stop request Execution"
                              }
                            },
                            "position": {
                              "basis": "35px"
                            },
                            "propConfig": {
                              "position.display": {
                                "binding": {
                                  "config": {
                                    "expression": "!{view.custom.chat_enabled}"
                                  },
                                  "type": "expr"
                                }
                              }
                            },
                            "props": {
                              "path": "material/stop",
                              "style": {
                                "classes": "icon"
                              }
                            },
                            "type": "ia.display.icon"
                          },
                          {
                            "meta": {
                              "name": "Icon_loading"
                            },
                            "position": {
                              "basis": "35px"
                            },
                            "propConfig": {
                              "position.display": {
                                "binding": {
                                  "config": {
                                    "expression": "!{view.custom.chat_enabled}"
                                  },
                                  "type": "expr"
                                }
                              }
                            },
                            "props": {
                              "path": "material/refresh",
                              "style": {
                                "classes": "icon spinning-icon"
                              }
                            },
                            "type": "ia.display.icon"
                          }
                        ],
                        "meta": {
                          "name": "FlexContainer_right"
                        },
                        "position": {
                          "basis": "200px"
                        },
                        "props": {
                          "justify": "flex-end",
                          "style": {
                            "overflow": "hidden"
                          }
                        },
                        "type": "ia.container.flex"
                      }
                    ],
                    "meta": {
                      "name": "FlexContainer_icons"
                    },
                    "position": {
                      "basis": "40px"
                    },
                    "props": {
                      "justify": "space-between",
                      "style": {
                        "overflow": "hidden"
                      }
                    },
                    "type": "ia.container.flex"
                  }
                ],
                "meta": {
                  "name": "FlexContainer_chat"
                },
                "props": {
                  "direction": "column",
                  "justify": "center",
                  "style": {
                    "classes": "chatbox",
                    "padding": "10px"
                  }
                },
                "type": "ia.container.flex"
              }
            ],
            "meta": {
              "name": "FlexContainer_chat"
            },
            "position": {
              "basis": "1000px"
            },
            "props": {
              "direction": "column",
              "style": {
                "paddingBottom": "20px",
                "paddingTop": "20px"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "FlexContainer_content"
        },
        "position": {
          "basis": "800px",
          "grow": 1
        },
        "props": {
          "justify": "center",
          "style": {
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Audio"
        },
        "position": {
          "basis": "55px"
        },
        "props": {
          "source": "http://10.10.85.9:8088/system/webdev/Iggy/audio/speech_2025_09_08_20_24_59.mp3"
        },
        "type": "ia.display.audio"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "page"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "chat_id",
          "pageScope": true,
          "script": "\t#comes from Exchange/Responsive Nav/chatItem on click event\n\tself.view.custom.chat \u003d \u0027\u0027\n\tself.view.params.chat_id \u003d payload[\u0027chat_id\u0027]\n\t",
          "sessionScope": false,
          "viewScope": true
        },
        {
          "messageType": "refresh",
          "pageScope": false,
          "script": "\t#from refresh web dev resource\n#\tsystem.util.getLogger(\u0027Page Chat root container - refresh MH\u0027).info(str(payload))\n\tlogger \u003d system.util.getLogger(\u0027Chat\u003eRoot Container MH\u0027)\n\ttry:\n\t\t#####generate audio\n\t\tif self.view.custom.tts.enabled and not self.view.custom.tts.processing:\n\t\t\tself.view.custom.tts.processing \u003d True\n\t\t\t\n\t\t\tpath \u003d \u0027Exchange/Iggy/Chat/get_chat_and_artifacts\u0027\n\t\t\tparameters \u003d {\n\t\t\t\t\u0027chat_id\u0027: payload[\u0027chat_id\u0027]\n\t\t\t}\n\t\t\tds \u003d system.db.execQuery(path, parameters)\n\t\t\t\n\t\t\timport json\n\t\t\tai_messages \u003d [msg for msg in ds if msg[\"event_type\"] \u003d\u003d \"message\" and msg[\"message_type\"] \u003d\u003d \"ai\"]\n\t\t\t\n\t\t\t# get the last one by timestamp\n\t\t\tlast_ai \u003d max(ai_messages, key\u003dlambda x: x[\"timestamp\"])\n\t\t\t\n\t\t\t# the content itself is a JSON string, so parse it\n\t\t\tparsed_content \u003d json.loads(last_ai[\"content\"])\n\t\t\t\n\t\t\t####send off audio\n\t\t\ttext \u003d parsed_content[\"content\"]\n\t\t\t\n\t\t\tsavePath \u003d \"/home/audio\"\n\t\t\tselected_voice \u003d \u0027shimmer\u0027\n\t\t\t\n\t\t\tnow \u003d system.date.now()\n\t\t\tformattedDate \u003d system.date.format(now, \"yyyy_MM_dd_HH_mm_ss\")\n\t\t\tfileName \u003d \"speech_%s.mp3\" % formattedDate\n\t\t\t\n\t\t\tif text:\n\t\t\t    # Call the gateway function to save the file\n\t\t\t    result \u003d exchange.iggy.tts.generateAndSaveSpeech(\n\t\t\t        inputText\u003dtext,\n\t\t\t        saveFolderPath\u003dsavePath,\n\t\t\t        fileName\u003dfileName,\n\t\t\t        voice\u003dselected_voice\n\t\t\t    )\n\t#\t\t    system.util.getLogger(\u0027button-tts\u0027).info(str(result))\n\t\t\t    if result[\u0027success\u0027]:\n\t\t\t        gatewayAddress \u003d self.session.props.gateway.address\n\t\t\t        projectName \u003d system.project.getProjectName()\n\t\t\t        \n\t\t\t        # Build the public URL to the audio file (same as before)\n\t\t\t        audioUrl \u003d \"%s/system/webdev/%s/audio/%s\" % (gatewayAddress, projectName, fileName)\n\t\t\t        logger.info(audioUrl)\n\t\t\t        self.getChild(\"Audio\").props.source \u003d audioUrl\n\t\t\t        import time\n\t\t\t        time.sleep(.1)#have to have this in here otherwise it won\u0027t play on the next line\n\t\t\t        self.getChild(\"Audio\").play()\n\texcept Exception as e:\n\t    # Use your logger to print the string representation of the error\n\t    logger.info(\"An error occurred in the refresh MH on Chat\u003eRoot: \" + str(e))\n\n\tself.view.params.chat_id \u003d payload[\u0027chat_id\u0027]\n\tself.view.custom.chat_enabled \u003d True\n\t\n\t#update nav\n\tsystem.perspective.sendMessage(\u0027chat_id\u0027, {\u0027chat_id\u0027: payload[\u0027chat_id\u0027]})\n\tsystem.perspective.sendMessage(\u0027refresh\u0027, {\u0027type\u0027: \u0027summary\u0027})",
          "sessionScope": true,
          "viewScope": false
        },
        {
          "messageType": "artifact_id",
          "pageScope": true,
          "script": "\t# implement your handler here\n\t#sent from Exchange/Iggy/Pages/Artifacts/artifactIcon root container click event\n\tself.view.custom.artifact.id \u003d payload[\u0027id\u0027]",
          "sessionScope": false,
          "viewScope": false
        },
        {
          "messageType": "enter",
          "pageScope": true,
          "script": "\tlogger \u003d system.util.getLogger(\u0027enter message handler on chat\u003eroot\u0027)\n\tlogger.info(\u0027in enter mh\u0027)\n\t# sent from session event script and enter button\n\tself.view.custom.tts.processing \u003d False #prepare the tts for the message received\n\tchat_id \u003d self.view.params.chat_id\n\turl \u003d \"http://n8n:5678/webhook/chat_receive\"\n\tchat \u003d payload.get(\u0027text\u0027, self.view.custom.chat)\n\tself.view.custom.chat \u003d \u0027\u0027\n\t\n\t\n\tcontent \u003d {\n\t\"type\": \"human\",\n\t\"content\": \"%s\" %chat,\n\t\"additional_kwargs\": {},\n\t\"response_metadata\": {}\n\t}\n\t#these are added in here to add some visual feedback that the request is being processed, the query for the binding will be refreshed in teh \u0027refresh\u0027 handler when the request is complete\n\ttemp_messages \u003d [\n\t  {\n\t    \"event_type\": \"message\",\n\t    \"item_id\": -1,\n\t    \"interaction_number\": -1,\n\t    \"session_id\": \"\",\n\t    \"message_type\": \"human\",\n\t    \"sort_group\": -1,\n\t    \"content\": system.util.jsonEncode(content),\n\t    \"timestamp\": 1756133013962\n\t  },\n\t  {\n\t    \"event_type\": \"Thinking\",\n\t    \"item_id\": -1,\n\t    \"interaction_number\": -1,\n\t    \"session_id\": \"\",\n\t    \"message_type\": \"ai\",\n\t    \"sort_group\": -1,\n\t    \"content\": \"{\\\"type\\\": \\\"ai\\\", \\\"content\\\": \"\", \\\"tool_calls\\\": [], \\\"additional_kwargs\\\": {}, \\\"response_metadata\\\": {}, \\\"invalid_tool_calls\\\": []}\",\n\t    \"timestamp\": 1756133013966\n\t  }\n\t]\n\tself.view.custom.thread.extend(temp_messages)\n\t\n#\tlogger.info(str(self.view.custom.thread))\n\t\n\tif not chat_id:\n\t\tusername \u003d self.session.props.auth.user.userName\n#\t\tchat \u003d self.view.custom.chat\n\t\t\n\t\tif username and chat:\n\t\t\tparams \u003d {\n\t\t\t\t\"username\": username,\n\t\t\t\t\"description\": chat\n\t\t\t}\n\t\t\t\n\t\t\tnew_id_dataset \u003d system.db.runNamedQuery(\"Exchange/Iggy/Chat/ignition_chat_history_insert\", params)\n\t\t\t\n\t\t\tif new_id_dataset.rowCount \u003e 0:\n\t\t\t\tnew_id \u003d new_id_dataset.getValueAt(0, \"id\")\n\t\t\t\tnew_chat_id \u003d \"{}-{}\".format(new_id, username)\n#\t\t\t\tself.view.custom.chat_id \u003d new_chat_id\n\t\t\t\tchat_id \u003d new_chat_id\n\n\tif chat_id:\n\t\tpostData \u003d {\n\t\t\t\"chat\": chat, #self.view.custom.chat,\n\t\t\t\"session_id\": self.session.props.id,\n\t\t\t\"chat_id\": chat_id\n\t\t}\n\t\tlogger.info(\"Sending chat: %s\" %postData)\n\t\t\n\t\texchange.iggy.n8n_integration.n8n_post(url,postData)\n\t\tself.view.custom.chat_enabled \u003d False\n\telse:\n\t\tlogger.info(\"Could not send chat\")\n\t\tsystem.perspective.print(\"Could not send chat. A user and prompt are required to start a new session.\")\n\t\n\t",
          "sessionScope": true,
          "viewScope": false
        },
        {
          "messageType": "tts-toggle",
          "pageScope": true,
          "script": "\t#sent from tts icon on this page and from companion app\n\tenabled \u003d self.view.custom.tts.enabled \n\tif enabled:#or we are turning it off\n\t\tself.getChild(\"Audio\").pause()\n\t\n\tself.view.custom.tts.enabled \u003d not enabled",
          "sessionScope": true,
          "viewScope": false
        },
        {
          "messageType": "tts-save-and-play",
          "pageScope": true,
          "script": "\tsavePath \u003d \"/home/audio\"\n\t\n\ttext_to_speak \u003d payload[\u0027text\u0027]\n\tselected_voice \u003d \u0027shimmer\u0027\n\t\n\tnow \u003d system.date.now()\n\tformattedDate \u003d system.date.format(now, \"yyyy_MM_dd_HH_mm_ss\")\n\tfileName \u003d \"speech_%s.mp3\" % formattedDate\n\t\n\t# 4. Check if the user has entered any text\n\ttry:\n\t\tif text_to_speak:\n\t\t    # Call the gateway function to save the file\n\t\t    result \u003d exchange.iggy.tts.generateAndSaveSpeech(\n\t\t        inputText\u003dtext_to_speak,\n\t\t        saveFolderPath\u003dsavePath,\n\t\t        fileName\u003dfileName,\n\t\t        voice\u003dselected_voice\n\t\t    )\n\t\t    system.util.getLogger(\u0027button-tts\u0027).info(str(result))\n\t\t    # 5. If the save was successful, update the Audio component and play\n\t\t    if result[\u0027success\u0027]:\n\t\t        gatewayAddress \u003d self.session.props.gateway.address\n\t\t        projectName \u003d system.project.getProjectName()\n\t\t        \n\t\t        # Build the public URL to the audio file (same as before)\n\t\t        audioUrl \u003d \"%s/system/webdev/%s/audio/%s\" % (gatewayAddress, projectName, fileName)\n\t\t        system.util.getLogger(\u0027button-tts\u0027).info(audioUrl)\n\t\t        # --- THIS IS THE UPDATED PART ---\n\t\t        # Get a reference to your Audio component\n\t\t        self.getChild(\"Audio\").props.source \u003d audioUrl\n\t\t        import time\n\t\t        time.sleep(.1)#have to have this in here otherwise it won\u0027t play on the next line\n\t\t        self.getChild(\"Audio\").play()\n\t\t\tself.view.refreshBinding(\u0027custom.thread\u0027)\n\t\t\tself.view.custom.chat_enabled \u003d True\n\texcept:\n\t\tself.view.refreshBinding(\u0027custom.thread\u0027)\n\t\tself.view.custom.chat_enabled \u003d True",
          "sessionScope": false,
          "viewScope": false
        },
        {
          "messageType": "refresh-thread-binding",
          "pageScope": true,
          "script": "\t# implement your handler here\n\tself.view.refreshBinding(\u0027custom.thread\u0027)",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}