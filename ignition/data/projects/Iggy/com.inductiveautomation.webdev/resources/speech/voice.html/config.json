{
  "resource-type": "text-resource",
  "content-type": "text/html",
  "text": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<title>Voice ‚Üí n8n (Icon‚ÄëOnly UI)</title>\r\n<style>\r\n  body{margin:0;font-family:Arial,Helvetica,sans-serif;background:transparent;}\r\n  #btn{\r\n    position:fixed;\r\n    top:0px;left:0px;\r\n    width:40px;height:40px;\r\n    border:none;border-radius:8px;\r\n    font-size:1.2rem;\r\n    cursor:pointer;\r\n    transition:background .2s;\r\n    background:#00000000; /* default grey */\r\n    color:#777;\r\n  }\r\n  \r\n  #btn:hover{\r\n    background-color: #343a3f;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  #btn.listening{background:#4caf50}  /* green‚Äëjade */\r\n  #btn.finished{background:#0097a7}   /* blue/aqua */\r\n  #btn.error{background:#e53935}      /* red */\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<button id=\"btn\" title=\"Click or tap to speak\" aria-label=\"Start speaking\">üé§</button>\r\n<script>\r\n/*==============================================================*/\r\n/* 1Ô∏è‚É£  Speech recognizer ‚Äì Chrome/Safari\r\n/*==============================================================*/\r\nconst SpeechRecognition =\r\n    window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\nif (!SpeechRecognition) {\r\n  document.getElementById('btn').title = 'Speech API not supported';\r\n  document.getElementById('btn').disabled = true;\r\n}\r\n\r\nconst rec = new SpeechRecognition();\r\nrec.lang = 'en-US';\r\nrec.interimResults = true;\r\nrec.continuous = true;\r\nrec.maxAlternatives = 1;\r\n\r\n/*==============================================================*/\r\n/* 2Ô∏è‚É£  State\r\n/*==============================================================*/\r\nlet fullTranscript = '';    // confirmed words\r\nlet currentInterim = '';    // latest interim words\r\nlet silenceTimer = null;    // 2‚Äës silence timer\r\nlet isListening = false;    // recognizer active\r\n\r\nconst btn = document.getElementById('btn');\r\n\r\n/*==============================================================*/\r\n/* 3Ô∏è‚É£  Utility\r\n/*==============================================================*/\r\nfunction setButtonState(state, icon='üé§') {\r\n  btn.className = '';               // clear all classes\r\n  if (state) btn.classList.add(state);    // add the new state class\r\n  btn.textContent = icon;\r\n}\r\n\r\n/*==============================================================*/\r\n/* 4Ô∏è‚É£  POST final text\r\n/*==============================================================*/\r\nasync function sendToN8N(text) {\r\n  const url = '/system/webdev/Iggy/speech/process';\r\n  \r\n  const queryString = window.location.search;\r\n  const params = new URLSearchParams(queryString);\r\n  const data = {};\r\n  for (const [key, value] of params.entries()) {\r\n    data[key] = value;\r\n  }\r\n  data['text'] = text\r\n  \r\n  try {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data)\r\n    });\r\n    await response.json();        // ignore the payload\r\n    setButtonState('finished', '‚úÖ');\r\n  } catch (err) {\r\n    console.error('Error POSTing speech:', err);\r\n    setButtonState('error', '‚ùå');\r\n  }\r\n}\r\n\r\n/*==============================================================*/\r\n/* 5Ô∏è‚É£  Silence timer helper\r\n/*==============================================================*/\r\nfunction resetSilenceTimer() {\r\n  clearTimeout(silenceTimer);\r\n  silenceTimer = setTimeout(() => {\r\n    silenceTimer = null;\r\n    rec.stop();\r\n    isListening = false;\r\n    setButtonState('finished', '‚úÖ');\r\n\r\n    sendToN8N(fullTranscript.trim());\r\n  }, 2000);  // 2‚ÄØs silence\r\n}\r\n\r\n/*==============================================================*/\r\n/* 6Ô∏è‚É£  Event handlers\r\n/*==============================================================*/\r\nrec.onresult = (event) => {\r\n  resetSilenceTimer();        // any new data resets the timer\r\n  currentInterim = '';        // start fresh for this batch\r\n\r\n  for (let i = event.resultIndex; i < event.results.length; i++) {\r\n    const res = event.results[i];\r\n    const txt = res[0].transcript.trim();\r\n\r\n    if (res.isFinal) {\r\n      fullTranscript += txt + ' ';\r\n      currentInterim = '';\r\n    } else {\r\n      currentInterim += txt + ' ';\r\n    }\r\n  }\r\n\r\n  // Show the live line in the button‚Äôs title (tooltip)\r\n  btn.title = (fullTranscript + (currentInterim ? ' ' + currentInterim : '')).trim();\r\n};\r\n\r\nrec.onerror = (err) => {\r\n  console.error('Speech error:', err);\r\n  setButtonState('error', '‚ùå');\r\n};\r\n\r\nrec.onend = () => {\r\n  // If the silence timer hasn‚Äôt fired, we‚Äôre still mid‚Äësentence.\r\n  if (!silenceTimer) {\r\n    // Nothing to do ‚Äì the recognizer can simply restart on next click.\r\n  }\r\n};\r\n\r\n/*==============================================================*/\r\n/* 7Ô∏è‚É£  Click/Tap to start / retry\r\n/*==============================================================*/\r\nfunction startRecognition(event) {\r\n  // Prevent the browser from also firing a duplicate 'click' event on touch devices\r\n  if (event.type === 'touchstart') {\r\n    event.preventDefault();\r\n  }\r\n\r\n  if (isListening) return; // ignore double-clicks/taps\r\n\r\n  fullTranscript = '';\r\n  currentInterim = '';\r\n  isListening = true;\r\n  btn.title = 'Listening‚Ä¶';\r\n  setButtonState('listening', 'üîä'); // green while listening\r\n\r\n  rec.start();\r\n};\r\n\r\n// Assign the same function to both click and touchstart events\r\nbtn.addEventListener('click', startRecognition);\r\nbtn.addEventListener('touchstart', startRecognition);\r\n\r\n</script>\r\n</body>\r\n</html>"
}