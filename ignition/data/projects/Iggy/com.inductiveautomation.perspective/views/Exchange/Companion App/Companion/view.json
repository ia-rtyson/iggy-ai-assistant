{
  "custom": {
    "sessions": [],
    "tagValues": [
      {
        "tagPath": "[default]Alarm Toggle",
        "value": true
      },
      {
        "tagPath": "[default]Motor RPM",
        "value": 55
      },
      {
        "tagPath": "[default]Motor Setpoint",
        "value": 119
      },
      {
        "tagPath": "[default]Writeable Tag",
        "value": 20
      }
    ]
  },
  "params": {},
  "propConfig": {
    "custom.sessions": {
      "binding": {
        "config": {
          "expression": "now(0)"
        },
        "transforms": [
          {
            "code": "\treturn system.perspective.getSessionInfo(usernameFilter\u003d\u0027icc\u0027)",
            "type": "script"
          }
        ],
        "type": "expr"
      },
      "persistent": true
    },
    "custom.tagValues": {
      "binding": {
        "config": {
          "expression": "now(1000)"
        },
        "transforms": [
          {
            "code": "\tresults \u003d system.tag.browse(\"[default]\")\n\tpaths \u003d []\n\tfor i in results.getResults():\n\t    \n\t    if str(i[\u0027tagType\u0027]) \u003d\u003d \u0027AtomicTag\u0027:\n\t    \tpaths.append(str(i[\u0027fullPath\u0027]))\n\t\n\tvalues \u003d system.tag.readBlocking(paths)\n\t    # Do something useful with the stringType...\n\tcombined_list \u003d [{\u0027tagPath\u0027: path, \u0027value\u0027: val} for path, val in zip(paths, values)]\n\treturn combined_list",
            "type": "script"
          }
        ],
        "type": "expr"
      },
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 685,
      "width": 422
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "id": "nav",
                    "type": "toggle"
                  },
                  "scope": "C",
                  "type": "dock"
                },
                "onTouchStart": {
                  "config": {
                    "id": "nav",
                    "type": "toggle"
                  },
                  "scope": "C",
                  "type": "dock"
                }
              }
            },
            "meta": {
              "name": "Icon"
            },
            "position": {
              "basis": "30px"
            },
            "props": {
              "path": "material/dehaze"
            },
            "type": "ia.display.icon"
          }
        ],
        "meta": {
          "name": "FlexContainer_2"
        },
        "position": {
          "basis": "50px"
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "FlexContainer_3"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "FlexRepeater"
            },
            "position": {
              "shrink": 0
            },
            "propConfig": {
              "props.instances": {
                "binding": {
                  "config": {
                    "path": "view.custom.tagValues"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "direction": "column",
              "elementPosition": {
                "basis": "auto",
                "grow": 0,
                "shrink": 0
              },
              "path": "Exchange/Companion App/keyValue",
              "useDefaultViewHeight": false,
              "useDefaultViewWidth": false,
              "wrap": "wrap"
            },
            "type": "ia.display.flex-repeater"
          }
        ],
        "meta": {
          "name": "FlexContainer_1"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "direction": "column"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tpageId \u003d self.view.custom.sessions[0].pageIds[0]\n\tsessionId \u003d self.view.custom.sessions[0].id\n\tsystem.perspective.sendMessage(\u0027tts-toggle\u0027, {}, \u0027page\u0027, sessionId, pageId)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button"
            },
            "position": {
              "basis": "161px"
            },
            "props": {
              "text": "Toggle TTS"
            },
            "type": "ia.input.button"
          }
        ],
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "basis": "111px"
        },
        "props": {
          "justify": "center"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "IFrame"
            },
            "position": {
              "basis": "50px",
              "shrink": 0
            },
            "propConfig": {
              "props.src": {
                "binding": {
                  "config": {
                    "expression": "\"/system/webdev/Iggy/speech/voice.html?sessionId\u003d\" + {view.custom.sessions[0].id} + \"\u0026pageId\u003d\"+{view.custom.sessions[0].pageIds[0]}"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "backgroundColor": "--neutral-30"
              }
            },
            "type": "ia.display.iframe"
          }
        ],
        "meta": {
          "name": "FlexContainer_0"
        },
        "position": {
          "basis": "200px",
          "shrink": 0
        },
        "propConfig": {
          "custom.key": {
            "binding": {
              "config": {
                "expression": "now(0)"
              },
              "transforms": [
                {
                  "code": "\tret \u003d system.perspective.getSessionInfo(usernameFilter \u003d \u0027icc\u0027)\n\treturn ret",
                  "type": "script"
                }
              ],
              "type": "expr"
            }
          }
        },
        "props": {
          "alignItems": "center",
          "justify": "center"
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "justify": "flex-end"
    },
    "type": "ia.container.flex"
  }
}